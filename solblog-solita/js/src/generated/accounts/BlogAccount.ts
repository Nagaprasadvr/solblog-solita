/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as web3 from '@solana/web3.js'
import * as beetSolana from '@metaplex-foundation/beet-solana'
import * as beet from '@metaplex-foundation/beet'

/**
 * Arguments used to create {@link BlogAccount}
 * @category Accounts
 * @category generated
 */
export type BlogAccountArgs = {
  authority: web3.PublicKey
  latestPost: Uint8Array
}

export const blogAccountDiscriminator = [175, 29, 42, 253, 243, 77, 150, 155]
/**
 * Holds the data for the {@link BlogAccount} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
export class BlogAccount implements BlogAccountArgs {
  private constructor(
    readonly authority: web3.PublicKey,
    readonly latestPost: Uint8Array
  ) {}

  /**
   * Creates a {@link BlogAccount} instance from the provided args.
   */
  static fromArgs(args: BlogAccountArgs) {
    return new BlogAccount(args.authority, args.latestPost)
  }

  /**
   * Deserializes the {@link BlogAccount} from the data of the provided {@link web3.AccountInfo}.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static fromAccountInfo(
    accountInfo: web3.AccountInfo<Buffer>,
    offset = 0
  ): [BlogAccount, number] {
    return BlogAccount.deserialize(accountInfo.data, offset)
  }

  /**
   * Retrieves the account info from the provided address and deserializes
   * the {@link BlogAccount} from its data.
   *
   * @throws Error if no account info is found at the address or if deserialization fails
   */
  static async fromAccountAddress(
    connection: web3.Connection,
    address: web3.PublicKey,
    commitmentOrConfig?: web3.Commitment | web3.GetAccountInfoConfig
  ): Promise<BlogAccount> {
    const accountInfo = await connection.getAccountInfo(
      address,
      commitmentOrConfig
    )
    if (accountInfo == null) {
      throw new Error(`Unable to find BlogAccount account at ${address}`)
    }
    return BlogAccount.fromAccountInfo(accountInfo, 0)[0]
  }

  /**
   * Provides a {@link web3.Connection.getProgramAccounts} config builder,
   * to fetch accounts matching filters that can be specified via that builder.
   *
   * @param programId - the program that owns the accounts we are filtering
   */
  static gpaBuilder(
    programId: web3.PublicKey = new web3.PublicKey(
      '34zZZbZ6nsJ6zZNKtAsVDWMoCEmvVWMWpxVyxPBLzhNi'
    )
  ) {
    return beetSolana.GpaBuilder.fromStruct(programId, blogAccountBeet)
  }

  /**
   * Deserializes the {@link BlogAccount} from the provided data Buffer.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static deserialize(buf: Buffer, offset = 0): [BlogAccount, number] {
    return blogAccountBeet.deserialize(buf, offset)
  }

  /**
   * Serializes the {@link BlogAccount} into a Buffer.
   * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
   */
  serialize(): [Buffer, number] {
    return blogAccountBeet.serialize({
      accountDiscriminator: blogAccountDiscriminator,
      ...this,
    })
  }

  /**
   * Returns the byteSize of a {@link Buffer} holding the serialized data of
   * {@link BlogAccount} for the provided args.
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   */
  static byteSize(args: BlogAccountArgs) {
    const instance = BlogAccount.fromArgs(args)
    return blogAccountBeet.toFixedFromValue({
      accountDiscriminator: blogAccountDiscriminator,
      ...instance,
    }).byteSize
  }

  /**
   * Fetches the minimum balance needed to exempt an account holding
   * {@link BlogAccount} data from rent
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   * @param connection used to retrieve the rent exemption information
   */
  static async getMinimumBalanceForRentExemption(
    args: BlogAccountArgs,
    connection: web3.Connection,
    commitment?: web3.Commitment
  ): Promise<number> {
    return connection.getMinimumBalanceForRentExemption(
      BlogAccount.byteSize(args),
      commitment
    )
  }

  /**
   * Returns a readable version of {@link BlogAccount} properties
   * and can be used to convert to JSON and/or logging
   */
  pretty() {
    return {
      authority: this.authority.toBase58(),
      latestPost: this.latestPost,
    }
  }
}

/**
 * @category Accounts
 * @category generated
 */
export const blogAccountBeet = new beet.FixableBeetStruct<
  BlogAccount,
  BlogAccountArgs & {
    accountDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['accountDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['authority', beetSolana.publicKey],
    ['latestPost', beet.bytes],
  ],
  BlogAccount.fromArgs,
  'BlogAccount'
)
