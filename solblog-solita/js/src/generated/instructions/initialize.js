"use strict";
/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */
exports.__esModule = true;
exports.createInitializeInstruction = exports.initializeInstructionDiscriminator = exports.initializeStruct = void 0;
var beet = require("@metaplex-foundation/beet");
var web3 = require("@solana/web3.js");
/**
 * @category Instructions
 * @category Initialize
 * @category generated
 */
exports.initializeStruct = new beet.BeetArgsStruct([['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)]], 'InitializeInstructionArgs');
exports.initializeInstructionDiscriminator = [
    175, 175, 109, 31, 13, 152, 155, 237,
];
/**
 * Creates a _Initialize_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @category Instructions
 * @category Initialize
 * @category generated
 */
function createInitializeInstruction(accounts, programId) {
    var _a;
    if (programId === void 0) { programId = new web3.PublicKey('34zZZbZ6nsJ6zZNKtAsVDWMoCEmvVWMWpxVyxPBLzhNi'); }
    var data = exports.initializeStruct.serialize({
        instructionDiscriminator: exports.initializeInstructionDiscriminator
    })[0];
    var keys = [
        {
            pubkey: accounts.blogAccount,
            isWritable: true,
            isSigner: true
        },
        {
            pubkey: accounts.authority,
            isWritable: true,
            isSigner: true
        },
        {
            pubkey: (_a = accounts.systemProgram) !== null && _a !== void 0 ? _a : web3.SystemProgram.programId,
            isWritable: false,
            isSigner: false
        },
    ];
    var ix = new web3.TransactionInstruction({
        programId: programId,
        keys: keys,
        data: data
    });
    return ix;
}
exports.createInitializeInstruction = createInitializeInstruction;
