/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category MakePost
 * @category generated
 */
export type MakePostInstructionArgs = {
  newPost: Uint8Array
}
/**
 * @category Instructions
 * @category MakePost
 * @category generated
 */
export const makePostStruct = new beet.FixableBeetArgsStruct<
  MakePostInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['newPost', beet.bytes],
  ],
  'MakePostInstructionArgs'
)
/**
 * Accounts required by the _makePost_ instruction
 *
 * @property [_writable_] blogAccount
 * @property [_writable_, **signer**] authority
 * @category Instructions
 * @category MakePost
 * @category generated
 */
export type MakePostInstructionAccounts = {
  blogAccount: web3.PublicKey
  authority: web3.PublicKey
  systemProgram?: web3.PublicKey
}

export const makePostInstructionDiscriminator = [
  183, 46, 201, 124, 45, 198, 247, 158,
]

/**
 * Creates a _MakePost_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category MakePost
 * @category generated
 */
export function createMakePostInstruction(
  accounts: MakePostInstructionAccounts,
  args: MakePostInstructionArgs,
  programId = new web3.PublicKey('34zZZbZ6nsJ6zZNKtAsVDWMoCEmvVWMWpxVyxPBLzhNi')
) {
  const [data] = makePostStruct.serialize({
    instructionDiscriminator: makePostInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.blogAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.authority,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
  ]

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
